name: Auto Cleanup

on:
  push:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      cleanup_type:
        description: 'Cleanup type'
        required: false
        default: 'all'
        type: choice
        options:
          - all
          - logs_only
          - history_only

permissions:
  contents: write
  actions: write

jobs:
  cleanup:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        token: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Setup Git
      run: |
        git config --global user.name "GitHub Actions"
        git config --global user.email "actions@github.com"
    
    - name: Clean Commit History
      if: github.event.inputs.cleanup_type == 'all' || github.event.inputs.cleanup_type == 'history_only' || github.event.inputs.cleanup_type == ''
      run: |
        # Save current commit message
        LAST_MSG=$(git log -1 --pretty=%B)
        
        # Create new orphan branch
        git checkout --orphan temp-clean
        
        # Add all files
        git add -A
        
        # Create single commit
        git commit -m "Init: SharpCMLoot complete"
        
        # Replace main branch
        git branch -D main || true
        git branch -m main
        
        # Force push
        git push origin main --force
    
    - name: Clean Workflow Logs
      if: github.event.inputs.cleanup_type == 'all' || github.event.inputs.cleanup_type == 'logs_only' || github.event.inputs.cleanup_type == ''
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        # Get current run ID to avoid deleting ourselves
        CURRENT_RUN_ID=${{ github.run_id }}
        
        # Delete all other workflow runs
        gh run list --limit 100 --json databaseId -q '.[].databaseId' | while read id; do
          if [ "$id" != "$CURRENT_RUN_ID" ]; then
            echo "Deleting run $id"
            gh api -X DELETE "/repos/${{ github.repository }}/actions/runs/$id" || true
          fi
        done
        
        # Delete workflow runs from all workflows
        gh api "/repos/${{ github.repository }}/actions/workflows" --jq '.workflows[].id' | while read workflow_id; do
          echo "Checking workflow $workflow_id"
          gh api "/repos/${{ github.repository }}/actions/workflows/$workflow_id/runs" --jq '.workflow_runs[].id' | while read run_id; do
            if [ "$run_id" != "$CURRENT_RUN_ID" ]; then
              echo "Deleting run $run_id from workflow $workflow_id"
              gh api -X DELETE "/repos/${{ github.repository }}/actions/runs/$run_id" || true
            fi
          done
        done
    
    - name: Clean Old Releases
      if: github.event.inputs.cleanup_type == 'all' || github.event.inputs.cleanup_type == ''
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        # Keep only v0.0.1
        gh release list --limit 100 | while read -r line; do
          tag=$(echo "$line" | awk '{print $3}')
          if [ "$tag" != "v0.0.1" ]; then
            echo "Deleting release $tag"
            gh release delete "$tag" --yes || true
            git push --delete origin "$tag" || true
          fi
        done
        
        # Delete all tags except v0.0.1
        git tag -l | while read tag; do
          if [ "$tag" != "v0.0.1" ]; then
            echo "Deleting tag $tag"
            git tag -d "$tag" || true
            git push --delete origin "$tag" || true
          fi
        done
    
    - name: Self-Cleanup
      if: always()
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        # Schedule self-deletion after a delay
        # This gives time for the workflow to complete
        echo "This workflow run will be deleted in subsequent cleanup runs"
        
        # Create a marker file to track cleanup
        echo "$(date): Cleanup performed" >> cleanup.log || true